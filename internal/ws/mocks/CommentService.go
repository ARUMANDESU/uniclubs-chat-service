// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	commentservice "github.com/ARUMANDESU/uniclubs-comments-service/internal/services/commentservice"

	domain "github.com/ARUMANDESU/uniclubs-comments-service/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// CommentService is an autogenerated mock type for the CommentService type
type CommentService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, comment
func (_m *CommentService) Create(ctx context.Context, comment commentservice.CreateCommentDTO) (domain.Comment, error) {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, commentservice.CreateCommentDTO) (domain.Comment, error)); ok {
		return rf(ctx, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, commentservice.CreateCommentDTO) domain.Comment); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, commentservice.CreateCommentDTO) error); ok {
		r1 = rf(ctx, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, dto
func (_m *CommentService) Delete(ctx context.Context, dto commentservice.DeleteCommentDTO) error {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commentservice.DeleteCommentDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, dto
func (_m *CommentService) Update(ctx context.Context, dto commentservice.UpdateCommentDTO) (domain.Comment, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, commentservice.UpdateCommentDTO) (domain.Comment, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, commentservice.UpdateCommentDTO) domain.Comment); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, commentservice.UpdateCommentDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommentService creates a new instance of CommentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentService {
	mock := &CommentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
