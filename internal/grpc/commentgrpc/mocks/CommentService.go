// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/ARUMANDESU/uniclubs-comments-service/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// CommentService is an autogenerated mock type for the CommentService type
type CommentService struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CommentService) GetByID(ctx context.Context, id string) (domain.Comment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Comment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Comment); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByPostID provides a mock function with given fields: ctx, postID, filter
func (_m *CommentService) ListByPostID(ctx context.Context, postID string, filter domain.Filter) ([]domain.Comment, domain.PaginationMetadata, error) {
	ret := _m.Called(ctx, postID, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListByPostID")
	}

	var r0 []domain.Comment
	var r1 domain.PaginationMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Filter) ([]domain.Comment, domain.PaginationMetadata, error)); ok {
		return rf(ctx, postID, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Filter) []domain.Comment); ok {
		r0 = rf(ctx, postID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Filter) domain.PaginationMetadata); ok {
		r1 = rf(ctx, postID, filter)
	} else {
		r1 = ret.Get(1).(domain.PaginationMetadata)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, domain.Filter) error); ok {
		r2 = rf(ctx, postID, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewCommentService creates a new instance of CommentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentService {
	mock := &CommentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
